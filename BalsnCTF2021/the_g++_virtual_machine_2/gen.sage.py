

# This file was *autogenerated* from the file gen.sage
from sage.all_cmdline import *   # import sage library

_sage_const_31 = Integer(31); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_33 = Integer(33); _sage_const_25 = Integer(25); _sage_const_1 = Integer(1); _sage_const_24 = Integer(24); _sage_const_97 = Integer(97); _sage_const_3 = Integer(3); _sage_const_15 = Integer(15); _sage_const_11 = Integer(11); _sage_const_27 = Integer(27)
import numpy as np

flag = "balsn{maataprorromintovm}"
print(f"flag = {flag}, len(flag) = {len(flag)}")
L = len(flag)
F = Zmod(_sage_const_31 )

def str2mat(flag, mod = _sage_const_31 ):
    a = np.ones((_sage_const_5 , _sage_const_5 ))
    for i in range(_sage_const_5 ):
        for j in range(_sage_const_5 ):
            a[i, j] = (ord(flag[i * _sage_const_5 +j]) - ord('a')) % _sage_const_31 
    return a.astype(np.int32)


def mat2str(mat, mod = _sage_const_31 ):
    a = ""
    for i in range(_sage_const_5 ):
        for j in range(_sage_const_5 ):
            a += chr(int(mat[i, j]) + ord('a'))
    return a

def sbox(gen):
    ret = [_sage_const_0 ]*_sage_const_33 
    j = _sage_const_0 ;
    for i in range(_sage_const_33 ):
        test = pow(gen, i, _sage_const_31 )
        if test < _sage_const_25 :
            ret[j] = test
            j = j + _sage_const_1 
        
    ret[_sage_const_24 ] = _sage_const_0 
    return ret[:_sage_const_25 ]


def setMatrix(the, mod = _sage_const_97 ):
    a = np.ones((_sage_const_5 , _sage_const_5 ), dtype=np.int32)
    for i in range(_sage_const_5 ):
        for j in range(_sage_const_5 ):
            a[i, j] = int(pow(the, i * _sage_const_5  + j, mod))%_sage_const_31 
    return a


def permute(v, p):
    ret = [_sage_const_0 ] * _sage_const_25 
    v= np.array(v).reshape(-_sage_const_1 )
    for i in range(_sage_const_25 ):
        ret[p[i]] = v[i]
    return np.array(ret).reshape((_sage_const_5 , _sage_const_5 )).astype(np.int32)

def sumMatrix(v):
    return np.array(v).reshape(-_sage_const_1 ).astype(np.int32).sum()

def inverse_sbox(b):
    return [b.index(i) for i in range(_sage_const_25 )]

def f(v1, m_seed, sbox_seed):
    v1 = Matrix(F, v1)
    v2 = Matrix(F, setMatrix(m_seed))
    v3 = (v1 * v2)
    vnew = permute(v3, sbox(sbox_seed))
    
    return vnew

def invf(v, m_seed, sbox_seed):
    v3 = permute(v, inverse_sbox(sbox(sbox_seed)))
    v2_1 = Matrix(F, setMatrix(m_seed)).inverse()
    v1 = Matrix(F, v3) * v2_1
    
    return v1

out = f(str2mat(flag), _sage_const_5 , _sage_const_3 )
out = f(out, _sage_const_15 , _sage_const_11 )
vans = f(out, _sage_const_27 , _sage_const_24 )

print(vans)

out = invf(vans, _sage_const_27 , _sage_const_24 )
out = invf(out, _sage_const_15 , _sage_const_11 )
out = invf(out, _sage_const_5 , _sage_const_3 )

print(mat2str(out))

